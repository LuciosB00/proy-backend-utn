generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum QualificationState {
  APPROVED
  DESAPPROVED
  REGULAR
}

enum RegistrationState {
  APPROVED
  REJECTED
  PENDING
}

enum FourMonth {
  FIRST
  SECOND
  THIRD
  FOURTH
}

model User {
  id       String @id @default(uuid()) @db.Uuid
  email    String @unique
  fullName String
  password String
  role     Role   @default(USER)

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)

  @@index([id, email])
  @@map("users")
}

model Student {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  surname   String
  age       Int
  email     String
  password  String
  dni       String
  phone     String
  address   String
  registrationDate DateTime @default(now()) @db.Timestamptz(3)
  registrationState RegistrationState @default(PENDING)

  registrations   Registration[]
  qualifications  Qualification[]
  attendances     Attendance[]
  courses         Course[]   @relation("StudentCourses")
  careers         Career[]   @relation("StudentCareers")
}

model Teacher {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  surname   String
  age       Int
  email     String
  password  String
  dni       String
  phone     String
  address   String
  registrationDate DateTime @default(now()) @db.Timestamptz(3)
  registrationState RegistrationState @default(PENDING)

  qualifications Qualification[]
  courses        Course[]   @relation("TeacherCourses")
}

model Registration {
  id        String   @id @default(uuid()) @db.Uuid
  age       Int
  registrationDate DateTime @default(now()) @db.Timestamptz(3)
  registrationState RegistrationState @default(PENDING)

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String

  career    Career  @relation(fields: [careerId], references: [id])
  careerId  String
}

model Qualification {
  id        String   @id @default(uuid()) @db.Uuid
  year      Int
  qualificationDate DateTime @default(now()) @db.Timestamptz(3)
  qualificationState QualificationState @default(REGULAR)

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String

  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String
}

model Attendance {
  id        String   @id @default(uuid()) @db.Uuid
  day       DateTime @default(now()) @db.Timestamptz(3)
  status    AttendanceStatus @default(PRESENT)

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String
}

model Course {
  id    String   @id @default(uuid()) @db.Uuid
  name  String
  year  Int
  fourMonth FourMonth

  registrations  Registration[]
  qualifications Qualification[]
  attendances    Attendance[]
  students       Student[] @relation("StudentCourses")
  teachers       Teacher[] @relation("TeacherCourses")
  careers        Career[]  @relation("CourseCareers")
}

model Career {
  id    String   @id @default(uuid()) @db.Uuid
  name  String
  title String

  registrations Registration[]
  students      Student[] @relation("StudentCareers")
  courses       Course[]  @relation("CourseCareers")
}


