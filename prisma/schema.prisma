generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum QualificationState {
  APPROVED
  DESAPPROVED
  REGULAR
}

enum RegistrationState {
  APPROVED
  REJECTED
  PENDING
}

enum CourseState {
  PROMOTED
  REGULAR
  DEMOTED
}

enum FourMonth {
  FIRST
  SECOND
  THIRD
  FOURTH
}

model User {
  id       String @id @default(uuid()) @db.Uuid
  email    String @unique
  fullName String
  password String
  role     Role   @default(STUDENT)

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)

  student Student?
  teacher Teacher?

  @@index([id, email])
  @@map("users")
}

model Student {
  id        String   @id @default(uuid()) @db.Uuid
  age       Int
  dni       String   @unique
  phone     String
  address   String

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)

  user      User @relation(fields: [userId], references: [id])
  userId    String @unique
  
  registrationState RegistrationState @default(PENDING)

  matriculations  Matriculation[]
  qualifications  Qualification[]
  attendances     Attendance[]
  courses         Course[]   @relation("StudentCourses")
  careers         Career[]   @relation("StudentCareers")

  @@index([id, dni])
  @@map("students")
}

model Teacher {
  id        String   @id @default(uuid()) @db.Uuid
  age       Int
  dni       String   @unique
  phone     String
  address   String

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)

  user      User @relation(fields: [userId], references: [id])
  userId    String @unique

  courses   Course[]   @relation("TeacherCourses")

  @@map("teachers")
}

model Matriculation {
  id        String   @id @default(uuid()) @db.Uuid

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)

  registrationState RegistrationState @default(PENDING)
  courseState       CourseState?

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String

  @@map("matriculations")
}

model Qualification {
  id        String   @id @default(uuid()) @db.Uuid

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)

  qualificationDate DateTime @default(now()) @db.Timestamptz(3)
  qualificationState QualificationState @default(REGULAR)

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String

  @@map("qualifications")
}

model Attendance {
  id        String   @id @default(uuid()) @db.Uuid

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)

  attendanceDate     DateTime @default(now()) @db.Timestamptz(3)
  attendanceState    AttendanceStatus @default(PRESENT)

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String

  @@map("attendances")
}

model Course {
  id       String   @id @default(uuid()) @db.Uuid
  name     String
  year     Int
  fourMonth FourMonth

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)

  career    Career  @relation(fields: [careerId], references: [id])
  careerId  String

  matriculations  Matriculation[]
  qualifications  Qualification[]
  attendances     Attendance[]
  students        Student[] @relation("StudentCourses")
  teachers        Teacher[] @relation("TeacherCourses")

  @@map("courses")
}

model Career {
  id       String   @id @default(uuid()) @db.Uuid
  name     String
  title    String

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)

  courses  Course[]
  students Student[] @relation("StudentCareers")

  @@map("careers")
}
